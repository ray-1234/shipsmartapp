// components/EnhancedInputScreen.tsx
import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Alert,
} from 'react-native';
import { Picker } from '@react-native-picker/picker';
import { ProductInfo } from '../types/shipping';
import { validateProductInfo, autoCorrectDestination, ValidationResult } from '../utils/validation';

interface EnhancedInputScreenProps {
  productInfo: ProductInfo;
  onProductInfoChange: (productInfo: ProductInfo) => void;
  onDiagnosis: () => void;
}

export default function EnhancedInputScreen({ 
  productInfo, 
  onProductInfoChange, 
  onDiagnosis 
}: EnhancedInputScreenProps) {
  const [validation, setValidation] = useState<ValidationResult>({ 
    isValid: true, 
    errors: [], 
    warnings: [] 
  });
  const [showValidation, setShowValidation] = useState(false);

  // сЃфсѓбсЃФсѓ┐сѓцсЃаТцюУе╝
  useEffect(() => {
    const result = validateProductInfo(productInfo);
    setValidation(result);
  }, [productInfo]);

  const updateField = (field: keyof ProductInfo, value: string) => {
    // сЃЌсЃФсЃђсѓдсЃ│сЂФсЂфсЂБсЂЪсЂ«сЂДУЄфтІЋУБюТГБсЂ»СИЇУдЂ
    const updatedInfo = {
      ...productInfo,
      [field]: value
    };
    
    onProductInfoChange(updatedInfo);
  };

  const handleDiagnosis = () => {
    setShowValidation(true);
    
    if (!validation.isValid) {
      Alert.alert(
        'тЁЦтіЏсѓесЃЕсЃ╝',
        validation.errors.join('\n'),
        [{ text: 'OK' }]
      );
      return;
    }
    
    if (validation.warnings.length > 0) {
      Alert.alert(
        'уб║УфЇ',
        validation.warnings.join('\n') + '\n\nсЂЊсЂ«сЂЙсЂЙУе║ТќГсѓњуХџсЂЉсЂЙсЂЎсЂІ№╝Ъ',
        [
          { text: 'сѓГсЃБсЃ│сѓ╗сЃФ', style: 'cancel' },
          { text: 'уХџУАї', onPress: onDiagnosis }
        ]
      );
      return;
    }
    
    onDiagnosis();
  };

  const getInputStyle = (field: keyof ProductInfo) => {
    if (!showValidation) return styles.input;
    
    // сЃЌсЃФсЃђсѓдсЃ│сЂФсЂфсЂБсЂЪdestinationсЂ»жЎцтцќсЂЌсђЂТЋ░тђцжаЁуЏ«сЂ«сЂ┐сЃЂсѓДсЃЃсѓ»
    if (['length', 'width', 'thickness', 'weight'].includes(field)) {
      const value = parseFloat(productInfo[field]);
      return (!isNaN(value) && value > 0) ? styles.inputValid : styles.inputError;
    }
    
    return styles.input;
  };

  return (
    <SafeAreaView style={styles.container}>
      {/* сЃўсЃЃсЃђсЃ╝ */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>­ЪЊд уЎ║жђЂУе║ТќГсѓбсЃЌсЃф</Text>
        <Text style={styles.headerSubtitle}>Тюђт«ЅсЃ╗ТюђжђЪсЂ«уЎ║жђЂТќ╣Т│Ћ</Text>
        <Text style={styles.headerDescription}>сЂЎсЂљУдІсЂцсЂІсѓІ</Text>
      </View>

      {/* сЃАсѓцсЃ│сѓ│сЃ│сЃєсЃ│сЃё */}
      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        
        {/* сѓесЃЕсЃ╝сЃ╗УГдтЉіУАеуц║ */}
        {showValidation && (validation.errors.length > 0 || validation.warnings.length > 0) && (
          <View style={styles.validationContainer}>
            {validation.errors.map((error, index) => (
              <Text key={`error-${index}`} style={styles.errorText}>
                РЮї {error}
              </Text>
            ))}
            {validation.warnings.map((warning, index) => (
              <Text key={`warning-${index}`} style={styles.warningText}>
                Рџа№ИЈ {warning}
              </Text>
            ))}
          </View>
        )}
        
        {/* сѓФсЃєсѓ┤сЃфжЂИТіъ */}
        <View style={styles.formGroup}>
          <Text style={styles.label}>­ЪЊд сѓФсЃєсѓ┤сЃф</Text>
          <View style={styles.pickerContainer}>
            <Picker
              selectedValue={productInfo.category}
              style={styles.picker}
              onValueChange={(value) => updateField('category', value)}
            >
              <Picker.Item label="УАБжАъ" value="УАБжАъ" />
              <Picker.Item label="ТЏИу▒Ї" value="ТЏИу▒Ї" />
              <Picker.Item label="сѓ▓сЃ╝сЃа" value="сѓ▓сЃ╝сЃа" />
              <Picker.Item label="жЏЉУ▓е" value="жЏЉУ▓е" />
              <Picker.Item label="т«ХжЏ╗" value="т«ХжЏ╗" />
              <Picker.Item label="жБЪтЊЂ" value="жБЪтЊЂ" />
            </Picker>
          </View>
        </View>

        {/* сѓхсѓцсѓ║тЁЦтіЏ */}
        <View style={styles.formGroup}>
          <Text style={styles.label}>­ЪЊЈ сѓхсѓцсѓ║ (cm)</Text>
          <View style={styles.sizeInputsRow}>
            <TextInput
              style={[getInputStyle('length'), styles.sizeInput]}
              placeholder="жЋисЂЋ"
              value={productInfo.length}
              onChangeText={(value) => updateField('length', value)}
              keyboardType="numeric"
            />
            <TextInput
              style={[getInputStyle('width'), styles.sizeInput]}
              placeholder="т╣Ё"
              value={productInfo.width}
              onChangeText={(value) => updateField('width', value)}
              keyboardType="numeric"
            />
          </View>
          <TextInput
            style={[getInputStyle('thickness'), styles.fullWidth]}
            placeholder="тјџсЂ┐"
            value={productInfo.thickness}
            onChangeText={(value) => updateField('thickness', value)}
            keyboardType="numeric"
          />
          <Text style={styles.helperText}>
            ­ЪњА тјџсЂ┐3cmС╗ЦтєЁсЂасЂет«ЅСЙАсЂфжЁЇжђЂТќ╣Т│ЋсЂїтѕЕућесЂДсЂЇсЂЙсЂЎ
          </Text>
        </View>

        {/* жЄЇжЄЈтЁЦтіЏ */}
        <View style={styles.formGroup}>
          <Text style={styles.label}>Рџќ№ИЈ жЄЇжЄЈ (g)</Text>
          <TextInput
            style={getInputStyle('weight')}
            placeholder="450"
            value={productInfo.weight}
            onChangeText={(value) => updateField('weight', value)}
            keyboardType="numeric"
          />
          <Text style={styles.helperText}>
            ­ЪњА 1kgС╗ЦтєЁсЂасЂесЃЮсѓ╣сЃѕТіЋтЄйсѓхсЃ╝сЃЊсѓ╣сЂїтѕЕућесЂДсЂЇсЂЙсЂЎ
          </Text>
        </View>

        {/* УАїсЂЇтЁѕтЁЦтіЏ */}
        <View style={styles.formGroup}>
          <Text style={styles.label}>­ЪЈа УАїсЂЇтЁѕ</Text>
          <View style={styles.pickerContainer}>
            <Picker
              selectedValue={productInfo.destination}
              style={styles.picker}
              onValueChange={(value) => updateField('destination', value)}
            >
              <Picker.Item label="жЃйжЂЊт║юуюїсѓњжЂИТіъ" value="" />
              <Picker.Item label="тїЌТхижЂЊ" value="тїЌТхижЂЊ" />
              <Picker.Item label="жЮњТБ«уюї" value="жЮњТБ«уюї" />
              <Picker.Item label="т▓ЕТЅІуюї" value="т▓ЕТЅІуюї" />
              <Picker.Item label="т««тЪјуюї" value="т««тЪјуюї" />
              <Picker.Item label="уДІућ░уюї" value="уДІућ░уюї" />
              <Picker.Item label="т▒▒тйбуюї" value="т▒▒тйбуюї" />
              <Picker.Item label="удЈт│Хуюї" value="удЈт│Хуюї" />
              <Picker.Item label="УїетЪјуюї" value="УїетЪјуюї" />
              <Picker.Item label="ТаЃТюеуюї" value="ТаЃТюеуюї" />
              <Picker.Item label="уЙцждгуюї" value="уЙцждгуюї" />
              <Picker.Item label="тЪ╝ујЅуюї" value="тЪ╝ујЅуюї" />
              <Picker.Item label="тЇЃУЉЅуюї" value="тЇЃУЉЅуюї" />
              <Picker.Item label="ТЮ▒С║гжЃй" value="ТЮ▒С║гжЃй" />
              <Picker.Item label="уЦътЦѕтиЮуюї" value="уЦътЦѕтиЮуюї" />
              <Picker.Item label="Тќ░ТйЪуюї" value="Тќ░ТйЪуюї" />
              <Picker.Item label="т»їт▒▒уюї" value="т»їт▒▒уюї" />
              <Picker.Item label="уЪ│тиЮуюї" value="уЪ│тиЮуюї" />
              <Picker.Item label="удЈС║Ћуюї" value="удЈС║Ћуюї" />
              <Picker.Item label="т▒▒Тбеуюї" value="т▒▒Тбеуюї" />
              <Picker.Item label="жЋижЄјуюї" value="жЋижЄјуюї" />
              <Picker.Item label="т▓љжўюуюї" value="т▓љжўюуюї" />
              <Picker.Item label="жЮЎт▓Ауюї" value="жЮЎт▓Ауюї" />
              <Picker.Item label="ТёЏуЪЦуюї" value="ТёЏуЪЦуюї" />
              <Picker.Item label="СИЅжЄЇуюї" value="СИЅжЄЇуюї" />
              <Picker.Item label="Т╗ІУ│ђуюї" value="Т╗ІУ│ђуюї" />
              <Picker.Item label="С║гжЃйт║ю" value="С║гжЃйт║ю" />
              <Picker.Item label="тцДжўфт║ю" value="тцДжўфт║ю" />
              <Picker.Item label="тЁхт║Фуюї" value="тЁхт║Фуюї" />
              <Picker.Item label="тЦѕУЅ»уюї" value="тЦѕУЅ»уюї" />
              <Picker.Item label="тњїТГїт▒▒уюї" value="тњїТГїт▒▒уюї" />
              <Picker.Item label="ж│ЦтЈќуюї" value="ж│ЦтЈќуюї" />
              <Picker.Item label="т│ХТа╣уюї" value="т│ХТа╣уюї" />
              <Picker.Item label="т▓Ат▒▒уюї" value="т▓Ат▒▒уюї" />
              <Picker.Item label="т║Ѓт│Хуюї" value="т║Ѓт│Хуюї" />
              <Picker.Item label="т▒▒тЈБуюї" value="т▒▒тЈБуюї" />
              <Picker.Item label="тЙ│т│Хуюї" value="тЙ│т│Хуюї" />
              <Picker.Item label="ждЎтиЮуюї" value="ждЎтиЮуюї" />
              <Picker.Item label="ТёЏтфЏуюї" value="ТёЏтфЏуюї" />
              <Picker.Item label="жФўуЪЦуюї" value="жФўуЪЦуюї" />
              <Picker.Item label="удЈт▓Ауюї" value="удЈт▓Ауюї" />
              <Picker.Item label="СйљУ│ђуюї" value="СйљУ│ђуюї" />
              <Picker.Item label="жЋит┤јуюї" value="жЋит┤јуюї" />
              <Picker.Item label="уєіТюгуюї" value="уєіТюгуюї" />
              <Picker.Item label="тцДтѕєуюї" value="тцДтѕєуюї" />
              <Picker.Item label="т««т┤јуюї" value="т««т┤јуюї" />
              <Picker.Item label="ж╣┐тЁљт│Хуюї" value="ж╣┐тЁљт│Хуюї" />
              <Picker.Item label="Т▓ќуИёуюї" value="Т▓ќуИёуюї" />
            </Picker>
          </View>
          <Text style={styles.helperText}>
            ­ЪњА УиЮжЏбсЂФсѓѕсЂБсЂджЁЇжђЂТќЎжЄЉсЂїтцЅсѓЈсѓісЂЙсЂЎ
          </Text>
        </View>

        {/* Уе║ТќГсЃюсѓ┐сЃ│ */}
        <TouchableOpacity 
          style={[
            styles.ctaButton, 
            !validation.isValid && showValidation && styles.ctaButtonDisabled
          ]} 
          onPress={handleDiagnosis}
        >
          <Text style={styles.ctaButtonText}>
            {validation.isValid ? 'сЂісЂЎсЂЎсѓЂсѓњУе║ТќГсЂЎсѓІ' : 'тЁЦтіЏтєЁт«╣сѓњуб║УфЇсЂЌсЂдсЂЈсЂасЂЋсЂё'}
          </Text>
        </TouchableOpacity>

        {/* тЁЦтіЏуіХТ│ЂсЂ«УАеуц║ */}
        {validation.isValid && (
          <View style={styles.statusContainer}>
            <Text style={styles.statusText}>РюЁ тЁЦтіЏт«їС║є№╝ЂУе║ТќГсЂДсЂЇсЂЙсЂЎ</Text>
          </View>
        )}

      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f7fa',
  },
  header: {
    backgroundColor: '#1E88E5',
    paddingTop: 20,
    paddingBottom: 30,
    paddingHorizontal: 20,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: 'white',
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 14,
    color: 'white',
    opacity: 0.9,
    marginBottom: 4,
  },
  headerDescription: {
    fontSize: 14,
    color: 'white',
    opacity: 0.9,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  validationContainer: {
    backgroundColor: '#fff3cd',
    borderColor: '#ffeaa7',
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
    marginBottom: 20,
  },
  errorText: {
    color: '#d63031',
    fontSize: 12,
    marginBottom: 4,
  },
  warningText: {
    color: '#f39c12',
    fontSize: 12,
    marginBottom: 4,
  },
  formGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 14,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  input: {
    backgroundColor: 'white',
    borderWidth: 2,
    borderColor: '#e1e5e9',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 16,
  },
  inputValid: {
    backgroundColor: 'white',
    borderWidth: 2,
    borderColor: '#00b894',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 16,
  },
  inputError: {
    backgroundColor: '#fff5f5',
    borderWidth: 2,
    borderColor: '#d63031',
    borderRadius: 8,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 16,
  },
  pickerContainer: {
    backgroundColor: 'white',
    borderWidth: 2,
    borderColor: '#e1e5e9',
    borderRadius: 8,
    overflow: 'hidden',
  },
  picker: {
    height: 50,
  },
  sizeInputsRow: {
    flexDirection: 'row',
    gap: 10,
    marginBottom: 10,
  },
  sizeInput: {
    flex: 1,
  },
  fullWidth: {
    width: '100%',
  },
  helperText: {
    fontSize: 11,
    color: '#666',
    marginTop: 4,
    fontStyle: 'italic',
  },
  ctaButton: {
    backgroundColor: '#1E88E5',
    paddingVertical: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 20,
  },
  ctaButtonDisabled: {
    backgroundColor: '#bdc3c7',
  },
  ctaButtonText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
  statusContainer: {
    backgroundColor: '#d4edda',
    borderColor: '#c3e6cb',
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
    marginBottom: 40,
  },
  statusText: {
    color: '#155724',
    fontSize: 12,
    fontWeight: '600',
  },
});