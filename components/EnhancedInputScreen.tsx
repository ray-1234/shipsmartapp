// components/EnhancedInputScreen.tsx - ТїЂсЂАУЙ╝сЂ┐сЃ╗С╗ЋтЁЦсѓїтђцт»Йт┐юуЅѕ
import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Alert,
  Modal,
  FlatList,
  Switch,
} from 'react-native';
import { ProductInfo } from '../types/shipping';

interface EnhancedInputScreenProps {
  productInfo: ProductInfo;
  onProductInfoChange: (productInfo: ProductInfo) => void;
  onDiagnosis: () => void;
}

// сѓФсѓ╣сѓ┐сЃасЃЅсЃГсЃЃсЃЌсЃђсѓдсЃ│сѓ│сЃ│сЃЮсЃ╝сЃЇсЃ│сЃѕ
interface DropdownProps {
  label: string;
  value: string;
  placeholder: string;
  options: { label: string; value: string }[];
  onValueChange: (value: string) => void;
}

const CustomDropdown: React.FC<DropdownProps> = ({
  label,
  value,
  placeholder,
  options,
  onValueChange,
}) => {
  const [isVisible, setIsVisible] = useState(false);
  
  const selectedOption = options.find(option => option.value === value);
  const displayText = selectedOption ? selectedOption.label : placeholder;

  return (
    <View style={styles.formGroup}>
      <Text style={styles.label}>{label}</Text>
      <TouchableOpacity
        style={styles.dropdownButton}
        onPress={() => setIsVisible(true)}
      >
        <Text style={[
          styles.dropdownText,
          !selectedOption && styles.placeholderText
        ]}>
          {displayText}
        </Text>
        <Text style={styles.dropdownArrow}>Рќ╝</Text>
      </TouchableOpacity>
      
      <Modal
        visible={isVisible}
        transparent={true}
        animationType="fade"
        onRequestClose={() => setIsVisible(false)}
      >
        <TouchableOpacity 
          style={styles.modalOverlay}
          onPress={() => setIsVisible(false)}
        >
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>{label}</Text>
              <TouchableOpacity
                style={styles.closeButton}
                onPress={() => setIsVisible(false)}
              >
                <Text style={styles.closeButtonText}>РюЋ</Text>
              </TouchableOpacity>
            </View>
            
            <FlatList
              data={options}
              keyExtractor={(item) => item.value}
              renderItem={({ item }) => (
                <TouchableOpacity
                  style={[
                    styles.optionItem,
                    item.value === value && styles.selectedOption
                  ]}
                  onPress={() => {
                    onValueChange(item.value);
                    setIsVisible(false);
                  }}
                >
                  <Text style={[
                    styles.optionText,
                    item.value === value && styles.selectedOptionText
                  ]}>
                    {item.label}
                  </Text>
                  {item.value === value && (
                    <Text style={styles.checkmark}>РюЊ</Text>
                  )}
                </TouchableOpacity>
              )}
            />
          </View>
        </TouchableOpacity>
      </Modal>
    </View>
  );
};

export default function EnhancedInputScreen({ 
  productInfo, 
  onProductInfoChange, 
  onDiagnosis 
}: EnhancedInputScreenProps) {
  const [validation, setValidation] = useState({ isValid: true, errors: [] as string[] });

  // сЃљсЃфсЃЄсЃ╝сѓисЃДсЃ│
  useEffect(() => {
    const errors: string[] = [];
    
    if (!productInfo.category) errors.push('сѓФсЃєсѓ┤сЃфсѓњжЂИТіъсЂЌсЂдсЂЈсЂасЂЋсЂё');
    if (!productInfo.length || parseFloat(productInfo.length) <= 0) errors.push('жЋисЂЋсѓњТГБсЂЌсЂЈтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё');
    if (!productInfo.width || parseFloat(productInfo.width) <= 0) errors.push('т╣ЁсѓњТГБсЂЌсЂЈтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё'); 
    if (!productInfo.thickness || parseFloat(productInfo.thickness) <= 0) errors.push('тјџсЂ┐сѓњТГБсЂЌсЂЈтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё');
    if (!productInfo.weight || parseFloat(productInfo.weight) <= 0) errors.push('жЄЇжЄЈсѓњТГБсЂЌсЂЈтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё');
    if (!productInfo.destination) errors.push('жЁЇжђЂтЁѕсѓњжЂИТіъсЂЌсЂдсЂЈсЂасЂЋсЂё');
    if (!productInfo.senderLocation) errors.push('уЎ║жђЂтЁЃсѓњжЂИТіъсЂЌсЂдсЂЈсЂасЂЋсЂё');
    
    if (productInfo.salePrice && parseFloat(productInfo.salePrice) <= 0) {
      errors.push('У▓ЕтБ▓СЙАТа╝сЂ»0тєєсѓѕсѓітцДсЂЇсЂётђцсѓњтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё');
    }
    
    // С╗ЋтЁЦсѓїтђцсЂ«сЃљсЃфсЃЄсЃ╝сѓисЃДсЃ│№╝ѕС╗╗ТёЈжаЁуЏ«сЂасЂїсђЂтЁЦтіЏсЂїсЂѓсѓІта┤тљѕсЂ»сЃЂсѓДсЃЃсѓ»№╝Ѕ
    if (productInfo.costPrice && parseFloat(productInfo.costPrice) <= 0) {
      errors.push('С╗ЋтЁЦсѓїтђцсЂ»0тєєсѓѕсѓітцДсЂЇсЂётђцсѓњтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё');
    }
    
    // У▓ЕтБ▓СЙАТа╝ < С╗ЋтЁЦсѓїтђцсЂ«та┤тљѕсЂ«УГдтЉі
    if (productInfo.salePrice && productInfo.costPrice && 
        parseFloat(productInfo.salePrice) < parseFloat(productInfo.costPrice)) {
      errors.push('Рџа№ИЈ У▓ЕтБ▓СЙАТа╝сЂїС╗ЋтЁЦсѓїтђцсѓњСИІтЏъсЂБсЂдсЂёсЂЙсЂЎ');
    }
    
    setValidation({ isValid: errors.length === 0, errors });
  }, [productInfo]);

  const updateField = (field: keyof ProductInfo, value: string | boolean) => {
    onProductInfoChange({
      ...productInfo,
      [field]: value
    });
  };

  const handleDiagnosis = () => {
    if (!validation.isValid) {
      Alert.alert('тЁЦтіЏсѓесЃЕсЃ╝', validation.errors.join('\n'));
      return;
    }
    onDiagnosis();
  };

  // сѓФсЃєсѓ┤сЃфсѓфсЃЌсѓисЃДсЃ│
  const categoryOptions = [
    { label: 'сѓФсЃєсѓ┤сЃфсѓњжЂИТіъсЂЌсЂдсЂЈсЂасЂЋсЂё', value: '' },
    { label: '­ЪЊџ ТюгсЃ╗жЏЉУфїсЃ╗сѓ│сЃЪсЃЃсѓ»', value: 'ТЏИу▒Ї' },
    { label: '­ЪЉЋ УАБжАъсЃ╗сЃЋсѓАсЃЃсѓисЃДсЃ│', value: 'УАБжАъ' },
    { label: '­Ъј« сѓ▓сЃ╝сЃасЃ╗сЃЏсЃЊсЃ╝', value: 'сѓ▓сЃ╝сЃа' },
    { label: '­ЪЊ▒ т«ХжЏ╗сЃ╗сѓ╣сЃъсЃЏсЃ╗сѓФсЃАсЃЕ', value: 'т«ХжЏ╗' },
    { label: '­ЪЈа ућЪТ┤╗жЏЉУ▓есЃ╗сѓцсЃ│сЃєсЃфсѓб', value: 'жЏЉУ▓е' },
    { label: '­Ъњё сѓ│сѓ╣сЃАсЃ╗уЙјт«╣', value: 'сѓ│сѓ╣сЃА' },
    { label: '­ЪЇФ жБЪтЊЂсЃ╗жБ▓ТќЎ', value: 'жБЪтЊЂ' },
    { label: '­ЪџЌ УЄфтІЋУ╗ісЃ╗сЃљсѓцсѓ»', value: 'УЄфтІЋУ╗і' },
    { label: '­ЪЊЮ сЂЮсЂ«С╗ќ', value: 'сЂЮсЂ«С╗ќ' },
  ];

  // жЃйжЂЊт║юуюїсѓфсЃЌсѓисЃДсЃ│
  const prefectureOptions = [
    { label: 'жЃйжЂЊт║юуюїсѓњжЂИТіъ', value: '' },
    { label: 'тїЌТхижЂЊ', value: 'тїЌТхижЂЊ' },
    { label: 'жЮњТБ«уюї', value: 'жЮњТБ«уюї' },
    { label: 'т▓ЕТЅІуюї', value: 'т▓ЕТЅІуюї' },
    { label: 'т««тЪјуюї', value: 'т««тЪјуюї' },
    { label: 'уДІућ░уюї', value: 'уДІућ░уюї' },
    { label: 'т▒▒тйбуюї', value: 'т▒▒тйбуюї' },
    { label: 'удЈт│Хуюї', value: 'удЈт│Хуюї' },
    { label: 'УїетЪјуюї', value: 'УїетЪјуюї' },
    { label: 'ТаЃТюеуюї', value: 'ТаЃТюеуюї' },
    { label: 'уЙцждгуюї', value: 'уЙцждгуюї' },
    { label: 'тЪ╝ујЅуюї', value: 'тЪ╝ујЅуюї' },
    { label: 'тЇЃУЉЅуюї', value: 'тЇЃУЉЅуюї' },
    { label: 'ТЮ▒С║гжЃй', value: 'ТЮ▒С║гжЃй' },
    { label: 'уЦътЦѕтиЮуюї', value: 'уЦътЦѕтиЮуюї' },
    { label: 'Тќ░ТйЪуюї', value: 'Тќ░ТйЪуюї' },
    { label: 'т»їт▒▒уюї', value: 'т»їт▒▒уюї' },
    { label: 'уЪ│тиЮуюї', value: 'уЪ│тиЮуюї' },
    { label: 'удЈС║Ћуюї', value: 'удЈС║Ћуюї' },
    { label: 'т▒▒Тбеуюї', value: 'т▒▒Тбеуюї' },
    { label: 'жЋижЄјуюї', value: 'жЋижЄјуюї' },
    { label: 'т▓љжўюуюї', value: 'т▓љжўюуюї' },
    { label: 'жЮЎт▓Ауюї', value: 'жЮЎт▓Ауюї' },
    { label: 'ТёЏуЪЦуюї', value: 'ТёЏуЪЦуюї' },
    { label: 'СИЅжЄЇуюї', value: 'СИЅжЄЇуюї' },
    { label: 'Т╗ІУ│ђуюї', value: 'Т╗ІУ│ђуюї' },
    { label: 'С║гжЃйт║ю', value: 'С║гжЃйт║ю' },
    { label: 'тцДжўфт║ю', value: 'тцДжўфт║ю' },
    { label: 'тЁхт║Фуюї', value: 'тЁхт║Фуюї' },
    { label: 'тЦѕУЅ»уюї', value: 'тЦѕУЅ»уюї' },
    { label: 'тњїТГїт▒▒уюї', value: 'тњїТГїт▒▒уюї' },
    { label: 'ж│ЦтЈќуюї', value: 'ж│ЦтЈќуюї' },
    { label: 'т│ХТа╣уюї', value: 'т│ХТа╣уюї' },
    { label: 'т▓Ат▒▒уюї', value: 'т▓Ат▒▒уюї' },
    { label: 'т║Ѓт│Хуюї', value: 'т║Ѓт│Хуюї' },
    { label: 'т▒▒тЈБуюї', value: 'т▒▒тЈБуюї' },
    { label: 'тЙ│т│Хуюї', value: 'тЙ│т│Хуюї' },
    { label: 'ждЎтиЮуюї', value: 'ждЎтиЮуюї' },
    { label: 'ТёЏтфЏуюї', value: 'ТёЏтфЏуюї' },
    { label: 'жФўуЪЦуюї', value: 'жФўуЪЦуюї' },
    { label: 'удЈт▓Ауюї', value: 'удЈт▓Ауюї' },
    { label: 'СйљУ│ђуюї', value: 'СйљУ│ђуюї' },
    { label: 'жЋит┤јуюї', value: 'жЋит┤јуюї' },
    { label: 'уєіТюгуюї', value: 'уєіТюгуюї' },
    { label: 'тцДтѕєуюї', value: 'тцДтѕєуюї' },
    { label: 'т««т┤јуюї', value: 'т««т┤јуюї' },
    { label: 'ж╣┐тЁљт│Хуюї', value: 'ж╣┐тЁљт│Хуюї' },
    { label: 'Т▓ќуИёуюї', value: 'Т▓ќуИёуюї' },
  ];

  return (
    <SafeAreaView style={styles.container}>
      {/* сЃўсЃЃсЃђсЃ╝ */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>­ЪЊд сЃЋсЃфсЃъуЎ║жђЂУе║ТќГ</Text>
        <Text style={styles.headerSubtitle}>Тюђт«ЅсЃ╗ТюђжЂЕсЂфжЁЇжђЂТќ╣Т│ЋсѓњУдІсЂцсЂЉсѓѕсЂє</Text>
        <Text style={styles.headerDescription}>тЋєтЊЂТЃЁта▒сѓњтЁЦтіЏсЂЎсѓІсЂесђЂAIтѕєТъљсѓѓсЂДсЂЇсЂЙсЂЎ</Text>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        
        {/* сѓФсЃєсѓ┤сЃфжЂИТіъ */}
        <CustomDropdown
          label="­ЪЊѓ тЋєтЊЂсѓФсЃєсѓ┤сЃф"
          value={productInfo.category}
          placeholder="сѓФсЃєсѓ┤сЃфсѓњжЂИТіъсЂЌсЂдсЂЈсЂасЂЋсЂё"
          options={categoryOptions}
          onValueChange={(value) => updateField('category', value)}
        />

        {/* уЎ║жђЂтЁЃсЃ╗жЁЇжђЂтЁѕсѓ╗сѓ»сѓисЃДсЃ│ */}
        <View style={styles.locationSection}>
          <Text style={styles.sectionTitle}>­ЪЌ║№ИЈ уЎ║жђЂТЃЁта▒</Text>

          {/* уЎ║жђЂтЁЃжЂИТіъ */}
          <CustomDropdown
            label="­ЪЊЇ уЎ║жђЂтЁЃ"
            value={productInfo.senderLocation || ''}
            placeholder="жЃйжЂЊт║юуюїсѓњжЂИТіъ"
            options={prefectureOptions}
            onValueChange={(value) => updateField('senderLocation', value)}
          />

          {/* жЁЇжђЂтЁѕжЂИТіъ */}
          <CustomDropdown
            label="­ЪЈа жЁЇжђЂтЁѕ"
            value={productInfo.destination}
            placeholder="жЃйжЂЊт║юуюїсѓњжЂИТіъ"
            options={prefectureOptions}
            onValueChange={(value) => updateField('destination', value)}
          />

          {/* ТїЂсЂАУЙ╝сЂ┐сѓфсЃЌсѓисЃДсЃ│ */}
          <View style={styles.formGroup}>
            <Text style={styles.label}>­ЪџХРђЇРЎѓ№ИЈ жЁЇжђЂТќ╣Т│Ћ</Text>
            <View style={styles.switchContainer}>
              <View style={styles.switchOption}>
                <Text style={styles.switchLabel}>
                  {productInfo.isDropOff ? '­ЪЈф сѓ│сЃ│сЃЊсЃІсЃ╗тќХТЦГТЅђсЂФТїЂсЂАУЙ╝сЂ┐' : '­ЪЊъ УЄфт«ЁжЏєУЇисѓњСЙЮжа╝'}
                </Text>
                <Switch
                  value={productInfo.isDropOff || false}
                  onValueChange={(value) => updateField('isDropOff', value)}
                  trackColor={{ false: '#767577', true: '#81b0ff' }}
                  thumbColor={productInfo.isDropOff ? '#f5dd4b' : '#f4f3f4'}
                />
              </View>
              <Text style={styles.helperText}>
                ­ЪњА {productInfo.isDropOff 
                  ? 'сЃцсЃъсЃѕжЂІУ╝ИсЂфсѓЅТїЂсЂАУЙ╝сЂ┐сЂД110тєєтЅ▓т╝Ћ№╝Ђ' 
                  : 'УЄфт«ЁжЏєУЇисЂ»ТЦйсЂДсЂЎсЂїсђЂТїЂсЂАУЙ╝сЂ┐сЂ«Тќ╣сЂїсЂітЙЌсЂДсЂЎ'}
              </Text>
            </View>
          </View>
          
          <Text style={styles.helperText}>
            ­ЪњА УиЮжЏбсЂФсѓѕсЂБсЂджЁЇжђЂТќЎжЄЉсЂїтцЅсѓЈсѓісЂЙсЂЎ
          </Text>
        </View>

        {/* тЋєтЊЂТЃЁта▒сѓ╗сѓ»сѓисЃДсЃ│ */}
        <View style={styles.productSection}>
          <Text style={styles.sectionTitle}>­ЪЊЈ тЋєтЊЂТЃЁта▒</Text>

          {/* сѓхсѓцсѓ║тЁЦтіЏ */}
          <View style={styles.formGroup}>
            <Text style={styles.label}>­ЪЊЈ сѓхсѓцсѓ║ (cm)</Text>
            
            <View style={styles.sizeInputWithLabel}>
              <Text style={styles.sizeInputLabel}>жЋисЂЋ№╝ѕуИд№╝Ѕ</Text>
              <TextInput
                style={styles.sizeInput}
                placeholder="СЙІ: 25"
                value={productInfo.length}
                onChangeText={(value) => updateField('length', value)}
                keyboardType="numeric"
              />
            </View>
            
            <View style={styles.sizeInputWithLabel}>
              <Text style={styles.sizeInputLabel}>т╣Ё№╝ѕТеф№╝Ѕ</Text>
              <TextInput
                style={styles.sizeInput}
                placeholder="СЙІ: 18"
                value={productInfo.width}
                onChangeText={(value) => updateField('width', value)}
                keyboardType="numeric"
              />
            </View>
            
            <View style={styles.sizeInputWithLabel}>
              <Text style={styles.sizeInputLabel}>тјџсЂ┐№╝ѕжФўсЂЋ№╝Ѕ</Text>
              <TextInput
                style={styles.sizeInput}
                placeholder="СЙІ: 2.8"
                value={productInfo.thickness}
                onChangeText={(value) => updateField('thickness', value)}
                keyboardType="numeric"
              />
            </View>
            
            <Text style={styles.helperText}>
              ­ЪњА тјџсЂ┐3cmС╗ЦтєЁсЂасЂет«ЅСЙАсЂфжЁЇжђЂТќ╣Т│ЋсЂїтѕЕућесЂДсЂЇсЂЙсЂЎ
            </Text>
          </View>

          {/* жЄЇжЄЈтЁЦтіЏ */}
          <View style={styles.formGroup}>
            <Text style={styles.label}>Рџќ№ИЈ жЄЇжЄЈ (g)</Text>
            <TextInput
              style={styles.input}
              placeholder="450"
              value={productInfo.weight}
              onChangeText={(value) => updateField('weight', value)}
              keyboardType="numeric"
            />
            <Text style={styles.helperText}>
              ­ЪњА 1kgС╗ЦтєЁсЂасЂесЃЮсѓ╣сЃѕТіЋтЄйсѓхсЃ╝сЃЊсѓ╣сЂїтѕЕућесЂДсЂЇсЂЙсЂЎ
            </Text>
          </View>
        </View>

        {/* У▓ЕтБ▓ТЃЁта▒сѓ╗сѓ»сѓисЃДсЃ│ */}
        <View style={styles.salesSection}>
          <Text style={styles.sectionTitle}>­Ъњ░ У▓ЕтБ▓ТЃЁта▒</Text>
          
          <View style={styles.formGroup}>
            <Text style={styles.label}>­Ъњх У▓ЕтБ▓С║ѕт«џСЙАТа╝ (тєє) <Text style={styles.required}>т┐Ёжаѕ</Text></Text>
            <TextInput
              style={styles.input}
              placeholder="2000"
              value={productInfo.salePrice || ''}
              onChangeText={(value) => updateField('salePrice', value)}
              keyboardType="numeric"
            />
            <Text style={styles.helperText}>
              ­ЪњА У▓ЕтБ▓СЙАТа╝сѓњтЁЦтіЏсЂЎсѓІсЂетѕЕуЏісЂ«УЕ│у┤░тѕєТъљсЂїсЂДсЂЇсЂЙсЂЎ
            </Text>
          </View>

          <View style={styles.formGroup}>
            <Text style={styles.label}>­ЪЏњ С╗ЋтЁЦсѓїтђц (тєє) <Text style={styles.optional}>С╗╗ТёЈ</Text></Text>
            <TextInput
              style={styles.input}
              placeholder="СЙІ: 1200 (уЕ║уЎйсЂДсѓѓOK)"
              value={productInfo.costPrice || ''}
              onChangeText={(value) => updateField('costPrice', value)}
              keyboardType="numeric"
            />
            <Text style={styles.helperText}>
              ­ЪњА С╗ЋтЁЦсѓїтђцсѓњтЁЦтіЏсЂЎсѓІсЂесђЂсѓѕсѓіУЕ│у┤░сЂфтѕЕуЏіујЄтѕєТъљсЂїтЈ»УЃйсЂДсЂЎ
            </Text>
          </View>

          {/* тѕЕуЏіујЄсЃЌсЃгсЃЊсЃЦсЃ╝ */}
          {productInfo.salePrice && productInfo.costPrice && (
            <View style={styles.profitPreview}>
              <Text style={styles.profitPreviewTitle}>­ЪЊі тѕЕуЏіујЄсЃЌсЃгсЃЊсЃЦсЃ╝</Text>
              {(() => {
                const salePrice = parseFloat(productInfo.salePrice);
                const costPrice = parseFloat(productInfo.costPrice);
                const platformFee = Math.round(salePrice * 0.1); // сЃАсЃФсѓФсЃфТЅІТЋ░ТќЎ10%
                const grossProfit = salePrice - costPrice;
                const netProfitBeforeShipping = grossProfit - platformFee;
                const profitRate = ((grossProfit / salePrice) * 100);
                
                return (
                  <View>
                    <Text style={styles.profitLine}>
                      тБ▓СИіуиЈтѕЕуЏі: ┬Ц{grossProfit.toLocaleString()} ({profitRate.toFixed(1)}%)
                    </Text>
                    <Text style={styles.profitLine}>
                      ТЅІТЋ░ТќЎти«т╝ЋтЙї: ┬Ц{netProfitBeforeShipping.toLocaleString()}
                    </Text>
                    <Text style={styles.profitNote}>
                      Рђ╗ жђЂТќЎсЂ»сЂЊсЂ«тЙїсЂДти«сЂЌт╝ЋсЂІсѓїсЂЙсЂЎ
                    </Text>
                  </View>
                );
              })()}
            </View>
          )}
        </View>

        {/* Уе║ТќГсЃюсѓ┐сЃ│ */}
        <TouchableOpacity 
          style={[
            styles.ctaButton, 
            !validation.isValid && styles.ctaButtonDisabled
          ]} 
          onPress={handleDiagnosis}
        >
          <Text style={styles.ctaButtonText}>
            {validation.isValid ? 
              '­ЪћЇ сЂісЂЎсЂЎсѓЂжЁЇжђЂТќ╣Т│ЋсѓњУе║ТќГсЂЎсѓІ' : 
              'Рџа№ИЈ тЁЦтіЏтєЁт«╣сѓњуб║УфЇсЂЌсЂдсЂЈсЂасЂЋсЂё'}
          </Text>
        </TouchableOpacity>

        {/* тЁЦтіЏуіХТ│ЂсЂ«УАеуц║ */}
        {validation.isValid && (
          <View style={styles.statusContainer}>
            <Text style={styles.statusText}>РюЁ тЁЦтіЏт«їС║є№╝ЂУЕ│у┤░AIтѕєТъљсЂїтЈ»УЃйсЂДсЂЎ</Text>
          </View>
        )}

        {/* сѓесЃЕсЃ╝УАеуц║ */}
        {!validation.isValid && validation.errors.length > 0 && (
          <View style={styles.errorContainer}>
            {validation.errors.map((error, index) => (
              <Text key={index} style={styles.errorText}>РЮї {error}</Text>
            ))}
          </View>
        )}

      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f7fa',
  },
  header: {
    backgroundColor: '#1E88E5',
    paddingTop: 20,
    paddingBottom: 30,
    paddingHorizontal: 20,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: 'white',
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 14,
    color: 'white',
    opacity: 0.9,
    marginBottom: 4,
  },
  headerDescription: {
    fontSize: 14,
    color: 'white',
    opacity: 0.9,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  sectionTitle: {
    fontSize: 18,
    fontWeight: '700',
    color: '#333',
    marginBottom: 16,
    textAlign: 'center',
    backgroundColor: '#e3f2fd',
    paddingVertical: 8,
    borderRadius: 8,
  },
  locationSection: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  productSection: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  salesSection: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  formGroup: {
    marginBottom: 16,
  },
  label: {
    fontSize: 16,
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  required: {
    color: '#ff6b6b',
    fontSize: 12,
    fontWeight: '400',
  },
  optional: {
    color: '#6c757d',
    fontSize: 12,
    fontWeight: '400',
  },
  input: {
    backgroundColor: '#f8f9fa',
    borderWidth: 1,
    borderColor: '#e1e5e9',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 16,
    fontSize: 18,
    minHeight: 56,
  },
  
  // сѓ╣сѓцсЃЃсЃЂсѓ│сЃ│сЃєсЃі
  switchContainer: {
    backgroundColor: '#f8f9fa',
    borderRadius: 8,
    padding: 16,
  },
  switchOption: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 8,
  },
  switchLabel: {
    fontSize: 16,
    color: '#333',
    flex: 1,
    marginRight: 16,
  },
  
  // сѓхсѓцсѓ║тЁЦтіЏ
  sizeInputWithLabel: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 8,
  },
  sizeInputLabel: {
    fontSize: 14,
    color: '#666',
    width: 80,
    marginRight: 12,
  },
  sizeInput: {
    flex: 1,
    backgroundColor: '#f8f9fa',
    borderWidth: 1,
    borderColor: '#e1e5e9',
    borderRadius: 6,
    paddingHorizontal: 12,
    paddingVertical: 12,
    fontSize: 16,
  },
  
  // тѕЕуЏісЃЌсЃгсЃЊсЃЦсЃ╝
  profitPreview: {
    backgroundColor: '#e8f5e8',
    borderRadius: 8,
    padding: 16,
    marginTop: 8,
  },
  profitPreviewTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#2e7d2e',
    marginBottom: 8,
  },
  profitLine: {
    fontSize: 14,
    color: '#2e7d2e',
    marginBottom: 4,
  },
  profitNote: {
    fontSize: 12,
    color: '#666',
    fontStyle: 'italic',
    marginTop: 4,
  },
  
  // сѓФсѓ╣сѓ┐сЃасЃЅсЃГсЃЃсЃЌсЃђсѓдсЃ│сЂ«сѓ╣сѓ┐сѓцсЃФ
  dropdownButton: {
    backgroundColor: 'white',
    borderWidth: 2,
    borderColor: '#e1e5e9',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 16,
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    minHeight: 56,
  },
  dropdownText: {
    fontSize: 18,
    color: '#333',
    flex: 1,
  },
  placeholderText: {
    color: '#999',
  },
  dropdownArrow: {
    fontSize: 12,
    color: '#666',
    marginLeft: 8,
  },
  
  // сЃбсЃ╝сЃђсЃФсЂ«сѓ╣сѓ┐сѓцсЃФ
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: 'white',
    borderRadius: 12,
    width: '90%',
    maxHeight: '70%',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 8,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#e1e5e9',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: '#333',
  },
  closeButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#f8f9fa',
    justifyContent: 'center',
    alignItems: 'center',
  },
  closeButtonText: {
    fontSize: 16,
    color: '#666',
  },
  optionItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#f0f0f0',
  },
  selectedOption: {
    backgroundColor: '#e3f2fd',
  },
  optionText: {
    fontSize: 16,
    color: '#333',
    flex: 1,
  },
  selectedOptionText: {
    color: '#1E88E5',
    fontWeight: '600',
  },
  checkmark: {
    fontSize: 18,
    color: '#1E88E5',
    fontWeight: 'bold',
  },
  
  // CTAсЃюсѓ┐сЃ│
  ctaButton: {
    backgroundColor: '#1E88E5',
    borderRadius: 12,
    paddingVertical: 18,
    paddingHorizontal: 24,
    alignItems: 'center',
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.2,
    shadowRadius: 8,
    elevation: 6,
  },
  ctaButtonDisabled: {
    backgroundColor: '#ccc',
    shadowOpacity: 0,
    elevation: 0,
  },
  ctaButtonText: {
    color: 'white',
    fontSize: 18,
    fontWeight: '700',
  },
  
  // сѓ╣сЃєсЃ╝сѓ┐сѓ╣сЃ╗сѓесЃЕсЃ╝УАеуц║
  statusContainer: {
    backgroundColor: '#d4edda',
    borderRadius: 8,
    padding: 16,
    marginBottom: 20,
  },
  statusText: {
    color: '#155724',
    fontSize: 14,
    textAlign: 'center',
    fontWeight: '600',
  },
  errorContainer: {
    backgroundColor: '#f8d7da',
    borderRadius: 8,
    padding: 16,
    marginBottom: 20,
  },
  errorText: {
    color: '#721c24',
    fontSize: 14,
    marginBottom: 4,
  },
  
  // сЃўсЃФсЃЉсЃ╝сЃєсѓГсѓ╣сЃѕ
  helperText: {
    fontSize: 12,
    color: '#666',
    marginTop: 4,
    lineHeight: 16,
  },
});