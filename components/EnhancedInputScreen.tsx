// components/EnhancedInputScreen.tsx - Phase 1 т»Йт┐юуЅѕ№╝ѕUIТћ╣тќёсЂ«сЂ┐№╝Ѕ
import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  Text,
  View,
  TextInput,
  TouchableOpacity,
  ScrollView,
  SafeAreaView,
  Alert,
} from 'react-native';
import { Picker } from '@react-native-picker/picker';
import { ProductInfo } from '../types/shipping';

interface EnhancedInputScreenProps {
  productInfo: ProductInfo;
  onProductInfoChange: (productInfo: ProductInfo) => void;
  onDiagnosis: () => void;
}

export default function EnhancedInputScreen({ 
  productInfo, 
  onProductInfoChange, 
  onDiagnosis 
}: EnhancedInputScreenProps) {
  const [validation, setValidation] = useState({ isValid: true, errors: [] as string[] });

  // сЃљсЃфсЃЄсЃ╝сѓисЃДсЃ│
  useEffect(() => {
    const errors: string[] = [];
    
    // т┐ЁжаѕжаЁуЏ«сЃЂсѓДсЃЃсѓ»
    if (!productInfo.category) errors.push('сѓФсЃєсѓ┤сЃфсѓњжЂИТіъсЂЌсЂдсЂЈсЂасЂЋсЂё');
    if (!productInfo.length || parseFloat(productInfo.length) <= 0) errors.push('жЋисЂЋсѓњТГБсЂЌсЂЈтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё');
    if (!productInfo.width || parseFloat(productInfo.width) <= 0) errors.push('т╣ЁсѓњТГБсЂЌсЂЈтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё'); 
    if (!productInfo.thickness || parseFloat(productInfo.thickness) <= 0) errors.push('тјџсЂ┐сѓњТГБсЂЌсЂЈтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё');
    if (!productInfo.weight || parseFloat(productInfo.weight) <= 0) errors.push('жЄЇжЄЈсѓњТГБсЂЌсЂЈтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё');
    if (!productInfo.destination) errors.push('жЁЇжђЂтЁѕсѓњжЂИТіъсЂЌсЂдсЂЈсЂасЂЋсЂё');
    if (!productInfo.senderLocation) errors.push('уЎ║жђЂтЁЃсѓњжЂИТіъсЂЌсЂдсЂЈсЂасЂЋсЂё');
    
    // У▓ЕтБ▓СЙАТа╝сЃЂсѓДсЃЃсѓ»№╝ѕсѓфсЃЌсѓисЃДсЃісЃФсЂасЂїсЂѓсѓІта┤тљѕсЂ»ТцюУе╝№╝Ѕ
    if (productInfo.salePrice && parseFloat(productInfo.salePrice) <= 0) {
      errors.push('У▓ЕтБ▓СЙАТа╝сЂ»0тєєсѓѕсѓітцДсЂЇсЂётђцсѓњтЁЦтіЏсЂЌсЂдсЂЈсЂасЂЋсЂё');
    }
    
    setValidation({ isValid: errors.length === 0, errors });
  }, [productInfo]);

  const updateField = (field: keyof ProductInfo, value: string) => {
    onProductInfoChange({
      ...productInfo,
      [field]: value
    });
  };

  const handleDiagnosis = () => {
    if (!validation.isValid) {
      Alert.alert('тЁЦтіЏсѓесЃЕсЃ╝', validation.errors.join('\n'));
      return;
    }
    onDiagnosis();
  };

  // жЃйжЂЊт║юуюїсЂ«сѓфсЃЌсѓисЃДсЃ│№╝ѕтєЇтѕЕућетЈ»УЃйсЂфжЁЇтѕЌ№╝Ѕ
  const prefectures = [
    { label: 'жЃйжЂЊт║юуюїсѓњжЂИТіъ', value: '' },
    { label: 'тїЌТхижЂЊ', value: 'тїЌТхижЂЊ' },
    { label: 'жЮњТБ«уюї', value: 'жЮњТБ«уюї' },
    { label: 'т▓ЕТЅІуюї', value: 'т▓ЕТЅІуюї' },
    { label: 'т««тЪјуюї', value: 'т««тЪјуюї' },
    { label: 'уДІућ░уюї', value: 'уДІућ░уюї' },
    { label: 'т▒▒тйбуюї', value: 'т▒▒тйбуюї' },
    { label: 'удЈт│Хуюї', value: 'удЈт│Хуюї' },
    { label: 'УїетЪјуюї', value: 'УїетЪјуюї' },
    { label: 'ТаЃТюеуюї', value: 'ТаЃТюеуюї' },
    { label: 'уЙцждгуюї', value: 'уЙцждгуюї' },
    { label: 'тЪ╝ујЅуюї', value: 'тЪ╝ујЅуюї' },
    { label: 'тЇЃУЉЅуюї', value: 'тЇЃУЉЅуюї' },
    { label: 'ТЮ▒С║гжЃй', value: 'ТЮ▒С║гжЃй' },
    { label: 'уЦътЦѕтиЮуюї', value: 'уЦътЦѕтиЮуюї' },
    { label: 'Тќ░ТйЪуюї', value: 'Тќ░ТйЪуюї' },
    { label: 'т»їт▒▒уюї', value: 'т»їт▒▒уюї' },
    { label: 'уЪ│тиЮуюї', value: 'уЪ│тиЮуюї' },
    { label: 'удЈС║Ћуюї', value: 'удЈС║Ћуюї' },
    { label: 'т▒▒Тбеуюї', value: 'т▒▒Тбеуюї' },
    { label: 'жЋижЄјуюї', value: 'жЋижЄјуюї' },
    { label: 'т▓љжўюуюї', value: 'т▓љжўюуюї' },
    { label: 'жЮЎт▓Ауюї', value: 'жЮЎт▓Ауюї' },
    { label: 'ТёЏуЪЦуюї', value: 'ТёЏуЪЦуюї' },
    { label: 'СИЅжЄЇуюї', value: 'СИЅжЄЇуюї' },
    { label: 'Т╗ІУ│ђуюї', value: 'Т╗ІУ│ђуюї' },
    { label: 'С║гжЃйт║ю', value: 'С║гжЃйт║ю' },
    { label: 'тцДжўфт║ю', value: 'тцДжўфт║ю' },
    { label: 'тЁхт║Фуюї', value: 'тЁхт║Фуюї' },
    { label: 'тЦѕУЅ»уюї', value: 'тЦѕУЅ»уюї' },
    { label: 'тњїТГїт▒▒уюї', value: 'тњїТГїт▒▒уюї' },
    { label: 'ж│ЦтЈќуюї', value: 'ж│ЦтЈќуюї' },
    { label: 'т│ХТа╣уюї', value: 'т│ХТа╣уюї' },
    { label: 'т▓Ат▒▒уюї', value: 'т▓Ат▒▒уюї' },
    { label: 'т║Ѓт│Хуюї', value: 'т║Ѓт│Хуюї' },
    { label: 'т▒▒тЈБуюї', value: 'т▒▒тЈБуюї' },
    { label: 'тЙ│т│Хуюї', value: 'тЙ│т│Хуюї' },
    { label: 'ждЎтиЮуюї', value: 'ждЎтиЮуюї' },
    { label: 'ТёЏтфЏуюї', value: 'ТёЏтфЏуюї' },
    { label: 'жФўуЪЦуюї', value: 'жФўуЪЦуюї' },
    { label: 'удЈт▓Ауюї', value: 'удЈт▓Ауюї' },
    { label: 'СйљУ│ђуюї', value: 'СйљУ│ђуюї' },
    { label: 'жЋит┤јуюї', value: 'жЋит┤јуюї' },
    { label: 'уєіТюгуюї', value: 'уєіТюгуюї' },
    { label: 'тцДтѕєуюї', value: 'тцДтѕєуюї' },
    { label: 'т««т┤јуюї', value: 'т««т┤јуюї' },
    { label: 'ж╣┐тЁљт│Хуюї', value: 'ж╣┐тЁљт│Хуюї' },
    { label: 'Т▓ќуИёуюї', value: 'Т▓ќуИёуюї' },
  ];

  return (
    <SafeAreaView style={styles.container}>
      {/* сЃўсЃЃсЃђсЃ╝ */}
      <View style={styles.header}>
        <Text style={styles.headerTitle}>­ЪЊд уЎ║жђЂУе║ТќГсѓбсЃЌсЃф</Text>
        <Text style={styles.headerSubtitle}>Тюђт«ЅсЃ╗ТюђжђЪсЂ«уЎ║жђЂТќ╣Т│Ћ</Text>
        <Text style={styles.headerDescription}>сЂЎсЂљУдІсЂцсЂІсѓІ</Text>
      </View>

      <ScrollView style={styles.content} showsVerticalScrollIndicator={false}>
        
        {/* сѓФсЃєсѓ┤сЃфжЂИТіъ */}
        <View style={styles.formGroup}>
          <Text style={styles.label}>­ЪЊд сѓФсЃєсѓ┤сЃф</Text>
          <View style={styles.pickerContainer}>
            <Picker
              selectedValue={productInfo.category}
              style={styles.picker}
              onValueChange={(value) => updateField('category', value)}
            >
              <Picker.Item label="УАБжАъ" value="УАБжАъ" />
              <Picker.Item label="ТЏИу▒Ї" value="ТЏИу▒Ї" />
              <Picker.Item label="сѓ▓сЃ╝сЃа" value="сѓ▓сЃ╝сЃа" />
              <Picker.Item label="жЏЉУ▓е" value="жЏЉУ▓е" />
              <Picker.Item label="т«ХжЏ╗" value="т«ХжЏ╗" />
              <Picker.Item label="жБЪтЊЂ" value="жБЪтЊЂ" />
            </Picker>
          </View>
        </View>

        {/* уЎ║жђЂтЁЃсЃ╗жЁЇжђЂтЁѕсѓ╗сѓ»сѓисЃДсЃ│ */}
        <View style={styles.locationSection}>
          <Text style={styles.sectionTitle}>­ЪЌ║№ИЈ уЎ║жђЂТЃЁта▒</Text>
          
          {/* уЎ║жђЂтЁЃ */}
          <View style={styles.formGroup}>
            <Text style={styles.label}>­ЪЊЇ уЎ║жђЂтЁЃ</Text>
            <View style={styles.pickerContainer}>
              <Picker
                selectedValue={productInfo.senderLocation || ''}
                style={styles.picker}
                onValueChange={(value) => updateField('senderLocation', value)}
              >
                {prefectures.map((pref, index) => (
                  <Picker.Item key={index} label={pref.label} value={pref.value} />
                ))}
              </Picker>
            </View>
          </View>

          {/* жЁЇжђЂтЁѕ */}
          <View style={styles.formGroup}>
            <Text style={styles.label}>­ЪЈа жЁЇжђЂтЁѕ</Text>
            <View style={styles.pickerContainer}>
              <Picker
                selectedValue={productInfo.destination}
                style={styles.picker}
                onValueChange={(value) => updateField('destination', value)}
              >
                {prefectures.map((pref, index) => (
                  <Picker.Item key={index} label={pref.label} value={pref.value} />
                ))}
              </Picker>
            </View>
            <Text style={styles.helperText}>
              ­ЪњА УиЮжЏбсЂФсѓѕсЂБсЂджЁЇжђЂТќЎжЄЉсЂїтцЅсѓЈсѓісЂЙсЂЎ
            </Text>
          </View>
        </View>

        {/* тЋєтЊЂТЃЁта▒сѓ╗сѓ»сѓисЃДсЃ│ */}
        <View style={styles.productSection}>
          <Text style={styles.sectionTitle}>­ЪЊЈ тЋєтЊЂТЃЁта▒</Text>

          {/* сѓхсѓцсѓ║тЁЦтіЏ - UIТћ╣тќёуЅѕ */}
          <View style={styles.formGroup}>
            <Text style={styles.label}>­ЪЊЈ сѓхсѓцсѓ║ (cm)</Text>
            
            {/* жЋисЂЋ */}
            <View style={styles.sizeInputWithLabel}>
              <Text style={styles.sizeInputLabel}>жЋисЂЋ№╝ѕуИд№╝Ѕ</Text>
              <TextInput
                style={styles.sizeInput}
                placeholder="СЙІ: 25"
                value={productInfo.length}
                onChangeText={(value) => updateField('length', value)}
                keyboardType="numeric"
              />
            </View>
            
            {/* т╣Ё */}
            <View style={styles.sizeInputWithLabel}>
              <Text style={styles.sizeInputLabel}>т╣Ё№╝ѕТеф№╝Ѕ</Text>
              <TextInput
                style={styles.sizeInput}
                placeholder="СЙІ: 18"
                value={productInfo.width}
                onChangeText={(value) => updateField('width', value)}
                keyboardType="numeric"
              />
            </View>
            
            {/* тјџсЂ┐ */}
            <View style={styles.sizeInputWithLabel}>
              <Text style={styles.sizeInputLabel}>тјџсЂ┐№╝ѕжФўсЂЋ№╝Ѕ</Text>
              <TextInput
                style={styles.sizeInput}
                placeholder="СЙІ: 2.8"
                value={productInfo.thickness}
                onChangeText={(value) => updateField('thickness', value)}
                keyboardType="numeric"
              />
            </View>
            
            <Text style={styles.helperText}>
              ­ЪњА тјџсЂ┐3cmС╗ЦтєЁсЂасЂет«ЅСЙАсЂфжЁЇжђЂТќ╣Т│ЋсЂїтѕЕућесЂДсЂЇсЂЙсЂЎ
            </Text>
          </View>

          {/* жЄЇжЄЈтЁЦтіЏ */}
          <View style={styles.formGroup}>
            <Text style={styles.label}>Рџќ№ИЈ жЄЇжЄЈ (g)</Text>
            <TextInput
              style={styles.input}
              placeholder="450"
              value={productInfo.weight}
              onChangeText={(value) => updateField('weight', value)}
              keyboardType="numeric"
            />
            <Text style={styles.helperText}>
              ­ЪњА 1kgС╗ЦтєЁсЂасЂесЃЮсѓ╣сЃѕТіЋтЄйсѓхсЃ╝сЃЊсѓ╣сЂїтѕЕућесЂДсЂЇсЂЙсЂЎ
            </Text>
          </View>
        </View>

        {/* У▓ЕтБ▓ТЃЁта▒сѓ╗сѓ»сѓисЃДсЃ│ */}
        <View style={styles.salesSection}>
          <Text style={styles.sectionTitle}>­Ъњ░ У▓ЕтБ▓ТЃЁта▒</Text>
          
          <View style={styles.formGroup}>
            <Text style={styles.label}>­Ъњх У▓ЕтБ▓С║ѕт«џСЙАТа╝ (тєє)</Text>
            <TextInput
              style={styles.input}
              placeholder="2000"
              value={productInfo.salePrice || ''}
              onChangeText={(value) => updateField('salePrice', value)}
              keyboardType="numeric"
            />
            <Text style={styles.helperText}>
              ­ЪњА У▓ЕтБ▓СЙАТа╝сѓњтЁЦтіЏсЂЎсѓІсЂетѕЕуЏісЂ«УЕ│у┤░тѕєТъљсЂїсЂДсЂЇсЂЙсЂЎ
            </Text>
          </View>
        </View>

        {/* Уе║ТќГсЃюсѓ┐сЃ│ */}
        <TouchableOpacity 
          style={[
            styles.ctaButton, 
            !validation.isValid && styles.ctaButtonDisabled
          ]} 
          onPress={handleDiagnosis}
        >
          <Text style={styles.ctaButtonText}>
            {validation.isValid ? 'сЂісЂЎсЂЎсѓЂсѓњУе║ТќГсЂЎсѓІ' : 'тЁЦтіЏтєЁт«╣сѓњуб║УфЇсЂЌсЂдсЂЈсЂасЂЋсЂё'}
          </Text>
        </TouchableOpacity>

        {/* тЁЦтіЏуіХТ│ЂсЂ«УАеуц║ */}
        {validation.isValid && (
          <View style={styles.statusContainer}>
            <Text style={styles.statusText}>РюЁ тЁЦтіЏт«їС║є№╝ЂУЕ│у┤░AIтѕєТъљсЂїтЈ»УЃйсЂДсЂЎ</Text>
          </View>
        )}

        {/* сѓесЃЕсЃ╝УАеуц║ */}
        {!validation.isValid && validation.errors.length > 0 && (
          <View style={styles.errorContainer}>
            {validation.errors.map((error, index) => (
              <Text key={index} style={styles.errorText}>РЮї {error}</Text>
            ))}
          </View>
        )}

      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f5f7fa',
  },
  header: {
    backgroundColor: '#1E88E5',
    paddingTop: 20,
    paddingBottom: 30,
    paddingHorizontal: 20,
    alignItems: 'center',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: '600',
    color: 'white',
    marginBottom: 8,
  },
  headerSubtitle: {
    fontSize: 14,
    color: 'white',
    opacity: 0.9,
    marginBottom: 4,
  },
  headerDescription: {
    fontSize: 14,
    color: 'white',
    opacity: 0.9,
  },
  content: {
    flex: 1,
    paddingHorizontal: 20,
    paddingTop: 20,
  },
  sectionTitle: {
    fontSize: 18, // 16 Рєњ 18сЂФТІАтцД
    fontWeight: '700',
    color: '#333',
    marginBottom: 16,
    textAlign: 'center',
    backgroundColor: '#e3f2fd',
    paddingVertical: 8,
    borderRadius: 8,
  },
  locationSection: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  productSection: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  salesSection: {
    backgroundColor: 'white',
    borderRadius: 12,
    padding: 16,
    marginBottom: 20,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  formGroup: {
    marginBottom: 16,
  },
  label: {
    fontSize: 16, // 14 Рєњ 16сЂФТІАтцД
    fontWeight: '600',
    color: '#333',
    marginBottom: 8,
  },
  input: {
    backgroundColor: '#f8f9fa',
    borderWidth: 1,
    borderColor: '#e1e5e9',
    borderRadius: 8,
    paddingHorizontal: 16, // 12 Рєњ 16сЂФТІАтцД
    paddingVertical: 16,   // 12 Рєњ 16сЂФТІАтцД
    fontSize: 18,          // 16 Рєњ 18сЂФТІАтцД
    minHeight: 56,         // Тюђт░ЈжФўсЂЋсѓњУ┐йтіа
  },
  pickerContainer: {
    backgroundColor: '#f8f9fa',
    borderWidth: 1,
    borderColor: '#e1e5e9',
    borderRadius: 8,
    overflow: 'hidden',
    minHeight: 56, // Тюђт░ЈжФўсЂЋсѓњУ┐йтіа
  },
  picker: {
    height: 56,    // 50 Рєњ 56сЂФТІАтцД
    fontSize: 18,  // сЃЋсѓЕсЃ│сЃѕсѓхсѓцсѓ║сѓњТўјуц║уџёсЂФТїЄт«џ
    color: '#333', // сЃєсѓГсѓ╣сЃѕУЅ▓сѓњТўјуб║сЂФ
  },
  
  // сѓхсѓцсѓ║тЁЦтіЏсЂ«Тћ╣тќё - сЃгсѓ╣сЃЮсЃ│сѓисЃќт»Йт┐ю
  sizeInputWithLabel: {
    marginBottom: 12,
  },
  sizeInputLabel: {
    fontSize: 14,
    fontWeight: '500',
    color: '#666',
    marginBottom: 6,
    paddingLeft: 4,
  },
  sizeInput: {
    backgroundColor: '#f8f9fa',
    borderWidth: 1,
    borderColor: '#e1e5e9',
    borderRadius: 8,
    paddingHorizontal: 16,
    paddingVertical: 16,
    fontSize: 18,
    minHeight: 56,
  },
  
  helperText: {
    fontSize: 12, // 11 Рєњ 12сЂФТІАтцД
    color: '#666',
    marginTop: 4,
    fontStyle: 'italic',
  },
  ctaButton: {
    backgroundColor: '#1E88E5',
    paddingVertical: 18, // 16 Рєњ 18сЂФТІАтцД
    borderRadius: 12,
    alignItems: 'center',
    marginTop: 20,
    marginBottom: 20,
    minHeight: 56,       // Тюђт░ЈжФўсЂЋсѓњУ┐йтіа
  },
  ctaButtonDisabled: {
    backgroundColor: '#bdc3c7',
  },
  ctaButtonText: {
    color: 'white',
    fontSize: 18,        // 16 Рєњ 18сЂФТІАтцД
    fontWeight: '600',
  },
  statusContainer: {
    backgroundColor: '#d4edda',
    borderColor: '#c3e6cb',
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
    alignItems: 'center',
    marginBottom: 40,
  },
  statusText: {
    color: '#155724',
    fontSize: 12,
    fontWeight: '600',
  },
  errorContainer: {
    backgroundColor: '#f8d7da',
    borderColor: '#f5c6cb',
    borderWidth: 1,
    borderRadius: 8,
    padding: 12,
    marginBottom: 40,
  },
  errorText: {
    color: '#721c24',
    fontSize: 12,
    marginBottom: 4,
  },
});